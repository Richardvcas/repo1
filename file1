Thank you for the detailed code and explanation â€” yes, I understand. Your current Flask API saves a VM YAML file (like wvm-004.yaml) locally and pushes it to GitLab using Git. Now you want to implement a way to:

> âœ… Delete the YAML file from GitLab (via git rm --cached),
ðŸš« without deleting it permanently from disk,
ðŸ“¤ And push that change (deletion) to GitLab.




---

âœ… What You Need To Do

We'll:

1. Create a new route (e.g., /api/vm-delete) in routes.py.


2. Create a new function in utils.py called remove_yaml_from_git().


3. Handle the deletion using git rm --cached.




---

âœ… Step-by-Step Update


---

ðŸ§© 1. Update routes.py â€“ Add DELETE Endpoint

@app.route("/api/vm-delete", methods=["POST"])
def vm_delete():
    data = request.get_json()
    if not data or "vm_name" not in data:
        return jsonify({"error": "Missing vm_name"}), 400

    try:
        yaml_filename = f"{data['vm_name']}.yaml"
        yaml_path = os.path.join("C:\\Users\\V849212\\Documents\\vm_api_project\\data", yaml_filename)
        remove_yaml_from_git(yaml_path)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "deleted", "vm_name": data["vm_name"]}), 200


---

ðŸ§© 2. Add remove_yaml_from_git() to utils.py

def remove_yaml_from_git(yaml_file_path):
    repo_dir = r"C:\Users\V849212\Documents\vm_api_project\repo_clonenew"
    manifests_dir = "manifests"

    if os.path.exists(repo_dir):
        shutil.rmtree(repo_dir)

    os.environ['GIT_SSL_NO_VERIFY'] = 'true'
    repo = git.Repo.clone_from(GIT_REPO_URL, repo_dir)

    # Compute target path inside repo
    dest_path = os.path.join(repo_dir, manifests_dir, os.path.basename(yaml_file_path))

    if os.path.exists(dest_path):
        # Perform git rm --cached (remove from index only)
        repo.index.remove([dest_path], working_tree=True)
        repo.index.commit(f"Remove {os.path.basename(yaml_file_path)} from Git repo")
        repo.remote(name="origin").push()
    else:
        raise FileNotFoundError(f"{dest_path} not found in cloned repo")


---

âœ… 3. Prepare bodydelete.json

{
  "vm_name": "wvm-004"
}


---

âœ… 4. Run the curl Command

curl -X POST http://localhost:5000/api/vm-delete \
     -H "Content-Type: application/json" \
     -d @bodydelete.json


---

âœ… Summary

Action	Function

Create	POST /api/vm-request â†’ push_yaml_to_git()
Delete	POST /api/vm-delete â†’ remove_yaml_from_git() with git rm --cached


This will remove the file from GitLab, commit the change, and leave your original YAML untouched in the local data folder.


---

Would you like me to help combine both push and delete logic in a single route with a "mode": "create" / "delete" flag?

curl -X POST http://localhost:5000/API/vm-request -H "Content-Type: application/json" -d @body.json
