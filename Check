import os
import yaml
from flask import Flask, request, jsonify
from .utils import render_vm_yaml, save_yaml_to_file, push_yaml_to_git, remove_yaml_from_git, render_vm_job_yaml
from flasgger import Swagger

app = Flask(__name__)
swagger = Swagger(app)

@app.route("/api/vm-resize", methods=["POST"])
def vm_resize():
    """
    Resize VM resources (CPU/Memory) and also generate a restart Job YAML and push both to GitLab via ArgoCD.
    ---
    tags:
      - VM Operations
    consumes:
      - application/json
    parameters:
      - in: body
        name: vm
        required: true
        schema:
          type: object
          example:
            vm_name: "wh-labocp-007"
            namespace: "gkp"
            cpu: 2
            memory: "8Gi"
            status: "false"
    responses:
      200:
        description: VM resize and restart job triggered successfully
        examples:
          application/json: 
            status: "VM resize and restart job triggered"
    """
    data = request.get_json()

    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    required_fields = ["vm_name", "namespace", "cpu", "memory", "status"]
    missing = [f for f in required_fields if f not in data]
    if missing:
        return jsonify({"error": f"Missing fields: {', '.join(missing)}"}), 400

    vm_name = data["vm_name"]
    namespace = data["namespace"]
    cpu = data["cpu"]
    memory = data["memory"]
    status = data["status"]

    filepath = f"C:\\Users\\V849212\\Documents\\vm_api_project\\data\\{vm_name}.yaml"

    try:
        with open(filepath, "r") as f:
            documents = list(yaml.safe_load_all(f))

        updated = False
        for doc in documents:
            if doc.get("kind") == "VirtualMachine" and doc.get("metadata", {}).get("name") == vm_name:
                doc["spec"]["template"]["spec"]["domain"]["cpu"]["cores"] = cpu
                doc["spec"]["template"]["spec"]["domain"]["resources"]["requests"]["memory"] = memory
                doc["spec"]["running"] = status.lower() == "true"
                updated = True
                break

        if not updated:
            return jsonify({"error": f"VirtualMachine '{vm_name}' not found in YAML"}), 404

        with open(filepath, "w") as f:
            yaml.safe_dump_all(documents, f, default_flow_style=False)

        push_yaml_to_git(filepath, namespace)

        # Now generate and push the restart Job YAML
        yaml_content = render_vm_job_yaml(data)
        job_filename = f"{vm_name}-restart.yaml"
        job_filepath = os.path.join("C:\\Users\\V849212\\Documents\\vm_api_project\\data", job_filename)
        save_yaml_to_file(yaml_content, job_filepath)
        push_yaml_to_git(job_filepath, namespace)

        return jsonify({
            "status": "VM resize and restart job triggered",
            "vm_name": vm_name,
            "cpu": cpu,
            "memory": memory,
            "restart_job": job_filename
        }), 200

    except FileNotFoundError:
        return jsonify({"error": f"YAML file not found for VM '{vm_name}'"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500
