{
  "error": "expected a single document in the stream\n  in \"C:\\Users\\V849212\\Documents\\vm_api_project\\data\\wh-labocp-007.yaml\", line 1, column 1\nbut found another document\n  in \"C:\\Users\\V849212\\Documents\\vm_api_project\\data\\wh-labocp-007.yaml\", line 82, column 1"
}


@app.route("/api/vm-resize", methods=["POST"])
def vm_resize():
    """
    VM Resize via GitLab + ArgoCD
    ---
    tags:
      - VM Operations
    consumes:
      - application/json
    parameters:
      - in: body
        name: vm
        required: true
        schema:
          type: object
          example:
            vm_name: "wh-labocp-007"            
            namespace: "gkp"
            volume_name: "wh-labocp-007-rootdisk"
            image_url: "http://10.14.222.30:8080/rhel-8.10-x86_64-kvm.qcow2"
            storage_size: "30Gi"
            status: "true"
            cpu: 1
            memory: "4Gi"
            diskname: "appdisk007"
            interface: "eth0"
            ip: "10.14.221.137/26"
            cloud_user: "clouduser"
            cloud_password: "a23456"
    responses:
      200:
        description: VM deployment triggered successfully
        examples:
          application/json: 
            status: "VM deployment triggered"
    """
    data = request.get_json()

    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    required_fields = [
        "vm_name", "namespace", "volume_name", "image_url",
        "storage_size", "status", "cpu", "memory", "diskname", "interface", "ip", "cloud_user", "cloud_password"
    ]
    missing = [f for f in required_fields if f not in data]
    if missing:
        return jsonify({"error": f"Missing fields: {', '.join(missing)}"}), 400

    try:
        
        yaml_content = render_vm_yaml(data)

        
        filename = f"C:\\Users\\V849212\\Documents\\vm_api_project\\data\\{data['vm_name']}.yaml"
        save_yaml_to_file(yaml_content, filename)

        # Push to GitLab
        push_yaml_to_git(filename,data["namespace"])

    except Exception as e:
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "accepted", "details": data}), 200



import yaml
from flask import request, jsonify

@app.route("/api/vm-resize", methods=["POST"])
def vm_resize():
    """
    Resize VM resources (CPU/Memory) and update YAML in GitLab via ArgoCD.
    ---
    tags:
      - VM Operations
    consumes:
      - application/json
    parameters:
      - in: body
        name: vm
        required: true
        schema:
          type: object
          example:
            vm_name: "wh-labocp-007"
            namespace: "gkp"
            cpu: 2
            memory: "8Gi"
    responses:
      200:
        description: VM resize triggered successfully
        examples:
          application/json: 
            status: "VM resize updated"
    """
    data = request.get_json()

    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    required_fields = ["vm_name", "namespace", "cpu", "memory"]
    missing = [f for f in required_fields if f not in data]
    if missing:
        return jsonify({"error": f"Missing fields: {', '.join(missing)}"}), 400

    vm_name = data["vm_name"]
    namespace = data["namespace"]
    cpu = data["cpu"]
    memory = data["memory"]
    
    filepath = f"C:\\Users\\V849212\\Documents\\vm_api_project\\data\\{vm_name}.yaml"

    try:
        with open(filepath, "r") as f:
            vm_yaml = yaml.safe_load(f)

        # Update CPU and memory
        vm_yaml["spec"]["template"]["spec"]["domain"]["cpu"]["cores"] = cpu
        vm_yaml["spec"]["template"]["spec"]["domain"]["resources"]["requests"]["memory"] = memory

        # Save updated YAML
        with open(filepath, "w") as f:
            yaml.safe_dump(vm_yaml, f, default_flow_style=False)

        # Push updated file to GitLab
        push_yaml_to_git(filepath, namespace)

    except FileNotFoundError:
        return jsonify({"error": f"YAML file not found for VM '{vm_name}'"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "VM resize updated", "vm_name": vm_name, "cpu": cpu, "memory": memory}), 200
