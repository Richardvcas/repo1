routes.py
from flask import Flask, request, jsonify
from .utils import render_vm_yaml, save_yaml_to_file, push_yaml_to_git

app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "VM Request API is running!"

@app.route("/api/vm-request", methods=["POST"])
def vm_request():
    data = request.get_json()

    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    required_fields = [
        "vm_name", "namespace", "volume_name", "image_url",
        "storage_size", "memory", "cloud_user", "cloud_password"
    ]
    missing = [f for f in required_fields if f not in data]
    if missing:
        return jsonify({"error": f"Missing fields: {', '.join(missing)}"}), 400

    try:
        # Render YAML
        yaml_content = render_vm_yaml(data)

        # Save to local file
        filename = f"C:\\Users\\V849212\\Documents\\vm_api_project\\data\\{data['vm_name']}.yaml"
        save_yaml_to_file(yaml_content, filename)

        # Push to GitLab
        push_yaml_to_git(filename)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "accepted", "details": data}), 200

----------------------------------------------------------------------

utils.py
import os
import shutil
import requests
import git
from .templates import VM_YAML_TEMPLATE

GIT_USERNAME = "V849212"
GIT_PASSWORD = "DigitalWorld@2025"
#GIT_REPO_URL = f"https://{GIT_USERNAME}:{GIT_PASSWORD}@gitlab.lab.jpmchase.net/V849212/vm-auto.git"
GIT_REPO_URL = f"https://gitlab.lab.jpmchase.net/V849212/vm-auto.git"



LOCAL_YAML_FOLDER = r"C:\Users\V849212\Documents\vm_api_project\data"

def render_vm_yaml(user_input):
    return VM_YAML_TEMPLATE.format(
        vm_name=user_input["vm_name"],
        namespace=user_input["namespace"],
        volume_name=user_input["volume_name"],
        image_url=user_input["image_url"],
        storage_size=user_input["storage_size"],
        memory=user_input["memory"],
        cloud_user=user_input["cloud_user"],
        cloud_password=user_input["cloud_password"]
    )

def save_yaml_to_file(content, filename):
    
    full_path = os.path.join(LOCAL_YAML_FOLDER, filename)
    with open(full_path, "w") as f:
        f.write(content)
    return full_path

def push_yaml_to_git(yaml_file_path):
#    response = requests.get('https://gitlab.lab.jpmchase.net/V849212/vm-project.git', verify=False)
    repo_dir = r"C:\Users\V849212\Documents\vm_api_project\repo_clonenew"     
    manifests_dir = "manifests"

    if os.path.exists(repo_dir):
        shutil.rmtree(repo_dir)

    os.environ['GIT_SSL_NO_VERIFY'] = 'true'
    repo = git.Repo.clone_from(GIT_REPO_URL, repo_dir)

    
    # Example: C:\Users\V849212\Documents\vm_api_project\data\vm67.yaml
    local_file_full_path = yaml_file_path

    
    dest_path = os.path.join(repo_dir, manifests_dir, os.path.basename(local_file_full_path))
    shutil.copyfile(local_file_full_path, dest_path)

    repo.index.add([dest_path])
    repo.index.commit("Automated VM YAML push")
    repo.remote(name="origin").push()



Use bodydelete.json deleting
Use body.json for pushing
vm_name : wvm-004

the above two programs i have

if i call using curl curl -X POST http://localhost:5000/api/vm-request -H "Content-Type: application/json" -d @bodydelete.json then i want to delete the file wvm-004.yaml file from repositoyr the above code is like pushing yaml to gitlab right the same way remove file not permantly like we can use git rm --cached C:\Users\V849212\Documents\vm_api_project\data and delete the file from gitlab hope you understand above code is pushing my file from local directory to gitlab right, not i want to remove from gitlab
