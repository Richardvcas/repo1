def remove_yaml_from_git(vm_name, namespace):
    import os
    import shutil
    import git

    repo_dir = r"C:\Users\V849212\Documents\vm_api_project\repo_clonenew"

    file_name = f"{vm_name}.yaml"

    if namespace == "gkp":
        manifests_dir = "gkp"
    elif namespace == "gos":
        manifests_dir = "gos"
    else:
        manifests_dir = "manifests"

    os.environ['GIT_SSL_NO_VERIFY'] = 'true'

    if not os.path.exists(repo_dir):
        repo = git.Repo.clone_from(GIT_REPO_URL, repo_dir, branch="main")
    else:
        repo = git.Repo(repo_dir)
        origin = repo.remotes.origin
        origin.fetch()
        repo.git.checkout('main')
        repo.git.reset('--hard', 'origin/main')

    dest_path = os.path.join(repo_dir, manifests_dir, file_name)

    if os.path.exists(dest_path):
        repo.index.remove([dest_path], working_tree=True)
        repo.index.commit(f"Removed {file_name} from Git repo under {manifests_dir}")
        repo.remote(name='origin').push()
    else:
        raise FileNotFoundError(f"{file_name} not found in repo under {manifests_dir}/")



@app.route("/api/vm-delete", methods=["POST"])
def vm_delete():
    data = request.get_json()
    if not data or "vm_name" not in data or "namespace" not in data:
        return jsonify({"error": "Missing vm_name or namespace"}), 400

    try:
        remove_yaml_from_git(data["vm_name"], data["namespace"])
    except Exception as e:
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "deleted", "vm_name": data["vm_name"]}), 200
