vm-api-project/
├── api/                          # Main Flask API code
│   ├── app.py                    # Entry point for Flask
│   ├── routes.py                 # All Flask API route handlers
│   ├── utils.py                  # YAML generation, Git operations
│   ├── templates/                # YAML templates (for VM and Job)
│   └── __init__.py              # Marks api/ as a Python package
│
├── data/                         # Temporarily stores generated YAMLs   	
│
├── repo_clonenew/               # Holds GitLab cloned repository



from flask import Flask, request, jsonify

app = Flask(__name__)

# Simple health check
@app.route("/", methods=["GET"])
def home():
    return "VM Request API is running!"

# POST endpoint for VM requests
@app.route("/api/vm-request", methods=["POST"])
def vm_request():
    data = request.get_json()

    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    required_fields = ["user", "vm_os", "cpu", "ram"]
    missing = [f for f in required_fields if f not in data]

    if missing:
        return jsonify({"error": f"Missing fields: {', '.join(missing)}"}), 400

    # In a real system you would store this or kick off provisioning here
    response = {
        "status": "accepted",
        "details": {
            "user": data["user"],
            "vm_os": data["vm_os"],
            "cpu": data["cpu"],
            "ram": data["ram"]
        }
    }
    return jsonify(response), 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)


----------------------------------------------------

JSON check

curl -X POST http://localhost:5000/api/vm-request -H "Content-Type: application/json" -d '{"user":"alice","vm_os":"ubuntu","cpu":2,"ram":4}'

 curl -X POST http://localhost:5000/api/vm-request -H "Content-Type: application/json" -d "{\"user\":\"alice\",\"vm_os\":\"ubuntu\",\"cpu\":2,\"ram\":4}"
